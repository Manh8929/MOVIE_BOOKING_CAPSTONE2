import React, { useState, useEffect } from "react";
import { toast } from "react-toastify";
import { FaTrashAlt } from "react-icons/fa";
import "react-toastify/dist/ReactToastify.css";
import { useNavigate, useParams } from "react-router-dom";

import FilmImg from "../assets/img/film/phim1.jpg";
import { getMovieDetail } from "../services/movieService";
import {
  getAvailableComment,
  postReview,
  deleteReview,
} from "../services/userService";

const MovieDetail = () => {
  const { id } = useParams();
  const [movie, setMovie] = useState(null);
  const navigate = useNavigate();
  const [comments, setComments] = useState([]);
  const [userComment, setUserComment] = useState("");
  const userInfo = JSON.parse(localStorage.getItem("currentUser"));

  useEffect(() => {
    const fetchMovieDetail = async () => {
      try {
        const data = await getMovieDetail(id);
        setMovie(data);
      } catch (err) {
        console.error("Error fetching movie details:", err);
      }
    };

    const fetchComments = async () => {
      try {
        const response = await getAvailableComment(id);
        console.log("FULL RESPONSE:", response);
        setComments(response);
      } catch (error) {
        console.error("Error fetching comments:", error);
      }
    };

    fetchMovieDetail();
    fetchComments();
  }, [id]);

  const forbiddenWords = [
    "ƒë·ªãt",
    "ƒë·ª•",
    "c·∫∑c",
    "l·ªìn",
    "bu·ªìi",
    "clgt",
    "v√£i l·ªìn",
    "fuck",
    "shit",
    "bitch",
    "asshole",
    "motherfucker",
    "dmm",
    "fml",
    "ƒëƒ©",
    "ƒëi·∫øm",
    "ki·∫øp",
    "cmm",
    "dm",
    "dcm",
    "dkm",
    "cƒëm",
    "ƒëcm"
  ];

  const specialCharacterRegex = /[~`!@#$%^&*()+={}\[\];:'"<>/?\\|]/g;

  const containsForbiddenWords = (text) => {
    return forbiddenWords.some((word) => text.toLowerCase().includes(word));
  };

  const containsSpecialCharacters = (text) => {
    return specialCharacterRegex.test(text);
  };

  const handlePostComment = async () => {
    const token = localStorage.getItem("token");
    if (!token) {
      toast.error("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ s·ª≠ d·ª•ng ch·ª©c nƒÉng n√†y");
      return;
    }

    if (!userComment.trim()) {
      toast.error("Vui l√≤ng nh·∫≠p n·ªôi dung nh·∫≠n x√©t");
      return;
    }

    if (!userInfo || !userInfo.user_id) {
      toast.error("Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng");
      return;
    }

    if (containsForbiddenWords(userComment)) {
      toast.error("N·ªôi dung nh·∫≠n x√©t ch·ª©a t·ª´ ng·ªØ kh√¥ng ph√π h·ª£p");
      return;
    }

    if (containsSpecialCharacters(userComment)) {
      toast.error("Kh√¥ng ƒë∆∞·ª£c s·ª≠ d·ª•ng k√≠ t·ª± ƒë·∫∑c bi·ªát trong nh·∫≠n x√©t");
      return;
    }

    try {
      const reviewData = {
        movie_id: parseInt(id, 10),
        comment: userComment,
        sentiment: "positive",
        user_id: userInfo.user_id,
      };

      await postReview(token, reviewData);
      toast.success("G·ª≠i nh·∫≠n x√©t th√†nh c√¥ng!");

      const updatedComments = await getAvailableComment(id);
      setComments(updatedComments);
      setUserComment("");
    } catch (error) {
      toast.error("G·ª≠i nh·∫≠n x√©t th·∫•t b·∫°i, vui l√≤ng th·ª≠ l·∫°i.");
      console.error("Error posting comment:", error);
    }
  };

  const handleDeleteComment = async (reviewId) => {
    const token = localStorage.getItem("token");
    if (!token) {
      toast.error("B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ xo√° nh·∫≠n x√©t");
      return;
    }

    const confirmDelete = window.confirm(
      "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën xo√° nh·∫≠n x√©t n√†y kh√¥ng?"
    );
    if (!confirmDelete) return;

    try {
      await deleteReview(token, reviewId);
      toast.success("Xo√° nh·∫≠n x√©t th√†nh c√¥ng!");

      // C·∫≠p nh·∫≠t l·∫°i danh s√°ch comment
      const updatedComments = await getAvailableComment(id);
      setComments(updatedComments);
    } catch (error) {
      toast.error("Kh√¥ng th·ªÉ xo√° nh·∫≠n x√©t. Vui l√≤ng th·ª≠ l·∫°i.");
      console.error("Error deleting comment:", error);
    }
  };

  if (!movie) return <div>Loading...</div>;

  // Reviews processing
  const reviews = comments || [];
  const positiveKeywords = [
    // üáªüá≥ Ti·∫øng Vi·ªát ph·ªï th√¥ng
    "tuy·ªát v·ªùi",
    "r·∫•t hay",
    "xu·∫•t s·∫Øc",
    "ph·∫£i xem",
    "c·∫£m ƒë·ªông",
    "·∫•n t∆∞·ª£ng",
    "h·∫•p d·∫´n",
    "m√£n nh√£n",
    "hay",
    "k·ªãch t√≠nh",
    "ƒë√°ng xem",
    "cu·ªën",
    "t√¨nh ti·∫øt hay",
    "h√†i h∆∞·ªõc",
    "s√°ng t·∫°o",
    "l√¥i cu·ªën",
    "t·∫°o c·∫£m h·ª©ng",
    "g√¢y x√∫c ƒë·ªông",
    "r·∫•t ƒë·ªânh",

    // Gen Z Vi·ªát
    "ƒë·ªânh kout",
    "x·ªãn x√≤",
    "ch√°y",
    "n·ª©c n·ªü",
    "h·∫øt n∆∞·ªõc ch·∫•m",
    "ƒë·ªânh c·ªßa ch√≥p",
    "best",
    "g·∫Øt",
    "khum th·ªÉ tin n·ªïi",
    "iu qu√°",
    "ngh·ªá th·∫≠t",
    "t·∫•u h√†i",
    "b√πng n·ªï",
    "b·ªëc l·ª≠a",
    "c∆∞ng x·ªâu",
    "tr√πm cu·ªëi",
    "ƒë·∫≠m ƒë√† b·∫£n s·∫Øc",
    "ƒë√°ng ƒë·ªìng ti·ªÅn b√°t g·∫°o",
    "x·ªãn m·ªãn",

    // üá∫üá∏ English (formal + informal)
    "awesome",
    "great",
    "excellent",
    "must watch",
    "masterpiece",
    "touching",
    "exciting",
    "emotional",
    "amazing",
    "worth it",
    "loved it",
    "heartwarming",
    "funny",
    "engaging",
    "inspiring",
    "mind-blowing",
    "cool",
    "unique",
    "brilliant",

    // English Gen Z / Slang
    "fire",
    "banger",
    "goat",
    "lit",
    "dope",
    "next level",
    "slaps",
    "vibes",
    "on point",
    "chef's kiss",
    "peak",
    "10/10",
    "üíØ",
    "üî•",
    "üòç",
    "ü§©",
    "üëè",
    "üëå",
  ];

  const negativeKeywords = [
    // üáªüá≥ Ti·∫øng Vi·ªát ph·ªï th√¥ng
    "ch√°n",
    "t·ªá",
    "bu·ªìn ng·ªß",
    "d·ªü",
    "nh√†m ch√°n",
    "thi·∫øu mu·ªëi",
    "v√¥ v·ªã",
    "kh√¥ng c·∫£m x√∫c",
    "xem xong qu√™n lu√¥n",
    "l·ªói",
    "c·∫©u th·∫£",
    "r·ªùi r·∫°c",
    "thi·∫øu logic",
    "di·ªÖn d·ªü",
    "thi·∫øu chi·ªÅu s√¢u",
    "qu√° nhanh",
    "qu√° d√†i",
    "ng·ªß g·∫≠t",
    "x√†m",

    // Gen Z Vi·ªát
    "toang",
    "flop",
    "x·ªâu ngang",
    "t·ª•t mood",
    "fail",
    "r√°c",
    "ch√°n ƒë·ªùi",
    "x√†m x√≠",
    "l∆∞∆°n l·∫πo",
    "m·∫•t vibe",
    "ng√°o",
    "nghe m·ªát",
    "x√†m gh√™",
    "kh√≥ nu·ªët",
    "x·ªân",
    "gh·∫ª",
    "t·∫°ch",
    "khoai",

    // üá∫üá∏ English (formal + informal)
    "boring",
    "bad",
    "terrible",
    "lame",
    "weak",
    "poor",
    "slow",
    "predictable",
    "not worth it",
    "mediocre",
    "unrealistic",
    "flat",
    "shallow",
    "cringe",
    "forgettable",
    "overrated",
    "underwhelming",
    "dragging",
    "messy",
    "clich√©",

    // English Gen Z / Slang
    "mid",
    "trash",
    "sleepy",
    "flop",
    "dry",
    "snoozefest",
    "yawn",
    "üëé",
    "üò¥",
    "üí§",
    "ü§Æ",
    "üôÑ",
    "üòë",
    "üò¨",
  ];

  const positiveReviews = reviews.filter((r) =>
    positiveKeywords.some((word) => r.comment.toLowerCase().includes(word))
  ).length;

  const negativeReviews = reviews.filter((r) =>
    negativeKeywords.some((word) => r.comment.toLowerCase().includes(word))
  ).length;

  const totalReviews = reviews.length;
  const positivePercentage = ((positiveReviews / totalReviews) * 100).toFixed(
    1
  );
  const negativePercentage = ((negativeReviews / totalReviews) * 100).toFixed(
    1
  );

  return (
    <div className="mt-[80px] min-h-screen bg-gradient-to-r from-red-900 to-black text-white p-6">
      <div className="max-w-4xl mx-auto">
        <h1 className="text-3xl font-bold mb-6">{movie.title}</h1>

        <div className="flex gap-6">
          {/* Movie Poster */}
          <img
            src={movie.poster_url || FilmImg}
            alt="Movie Poster"
            className="w-48 h-72 rounded-lg shadow-lg"
          />

          {/* Movie Info */}
          <div className="flex-1 space-y-2">
            <h2 className="text-2xl font-bold text-white">{movie.title}</h2>
            <p className="text-sm italic text-gray-300">{movie.description}</p>
            <p className="text-sm text-gray-400">
              {movie.detailed_description}
            </p>

            <div className="grid grid-cols-2 gap-x-4 gap-y-2 mt-4 text-sm text-gray-300">
              <div>
                <span className="font-semibold">Th·ªùi gian:</span>{" "}
                {movie.duration} ph√∫t
              </div>
              <div>
                <span className="font-semibold">Th·ªÉ lo·∫°i:</span> {movie.genre}
              </div>
              <div>
                <span className="font-semibold">Kh·ªüi chi·∫øu:</span>{" "}
                {new Date(movie.release_date).toLocaleDateString()}
              </div>
              <div>
                <span className="font-semibold">ƒê·∫°o di·ªÖn:</span>{" "}
                {movie.director}
              </div>
              <div>
                <span className="font-semibold">Di·ªÖn vi√™n:</span> {movie.actors}
              </div>
              <div>
                <span className="font-semibold">Ng√¥n ng·ªØ:</span>{" "}
                {movie.language}
              </div>
            </div>

            {/* Rating System */}
            <div className="mt-4">
              <h3 className="text-lg font-semibold">ƒê√°nh gi√° trung b√¨nh</h3>
              <div className="flex items-center">
                {[1, 2, 3, 4, 5].map((star) => (
                  <span
                    key={star}
                    className={`text-3xl ${
                      star <= (movie.average_rating / 2 || 0)
                        ? "text-yellow-400"
                        : "text-gray-500"
                    }`}
                  >
                    ‚òÖ
                  </span>
                ))}
                <span className="ml-2 text-sm text-gray-300">
                  ({Number(movie.average_rating || 0).toFixed(1)}/10)
                </span>
              </div>
            </div>

            {/* Reviews Summary */}
            <div className="mt-4">
              <h3 className="text-lg font-semibold">T·ªïng h·ª£p ƒë√°nh gi√°</h3>
              <p className="text-green-400">
                T√≠ch c·ª±c: {positivePercentage}% ({positiveReviews} l∆∞·ª£t)
              </p>
              <p className="text-red-400">
                Ti√™u c·ª±c: {negativePercentage}% ({negativeReviews} l∆∞·ª£t)
              </p>
            </div>
          </div>
        </div>
        {/* trailler */}
        {movie.trailer_url && (
          <div className="mt-10">
            <h3 className="text-xl font-semibold mb-4">Trailer</h3>
            <div className="aspect-w-16 aspect-h-9">
              <iframe
                src={movie.trailer_url}
                title="Trailer phim"
                frameBorder="0"
                allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                allowFullScreen
                className="w-full h-96 rounded-lg shadow-lg"
              ></iframe>
            </div>
          </div>
        )}

        {/* Proceed Button */}
        {movie.status !== "upcoming" && (
          <div className="mt-6">
            <button
              onClick={() => navigate("/theaters",{ state: { movie } })}
              className="px-6 py-3 bg-[#E63946] text-white rounded-lg text-lg font-semibold hover:bg-transparent hover:border-gray-400 hover:border"
            >
              ƒê·∫∑t v√©
            </button>
          </div>
        )}

        {/* User Reviews */}
        <div className="mt-8">
          <h3 className="text-lg font-semibold">ƒê√°nh Gi√° c·ªßa ng∆∞·ªùi xem</h3>
          <div className="mt-4 space-y-4">
            {comments.length === 0 ? (
              <p className="text-gray-400">Ch∆∞a c√≥ nh·∫≠n x√©t</p>
            ) : (
              comments.map((review, index) => (
                <div key={index} className="bg-gray-800 p-4 rounded-lg">
                  <div className="flex items-center gap-3">
                    <img
                      src={`${review.User?.avatar || "default-avatar.png"}`}
                      alt="Avatar"
                      className="w-10 h-10 rounded-full"
                    />
                    <h4 className="font-semibold">
                      {review.User?.full_name || "Ng∆∞·ªùi d√πng ·∫©n danh"}
                    </h4>
                  </div>
                  <div className="flex justify-between mt-2">
                    <p className="text-gray-300">{review.comment}</p>
                    {userInfo?.user_id === review.user_id && (
                      <button
                        onClick={() => handleDeleteComment(review.review_id)}
                        className="text-red-400 hover:text-red-600"
                        title="Xo√° nh·∫≠n x√©t"
                      >
                        <FaTrashAlt />
                      </button>
                    )}
                  </div>
                  {review.rating !== null && (
                    <div className="flex">
                      {[1, 2, 3, 4, 5].map((star) => (
                        <span
                          key={star}
                          className={`text-xl ${
                            star <= review.rating
                              ? "text-yellow-400"
                              : "text-gray-500"
                          }`}
                        >
                          ‚òÖ
                        </span>
                      ))}
                    </div>
                  )}
                </div>
              ))
            )}
          </div>
        </div>

        {/* Form g·ª≠i nh·∫≠n x√©t */}
        <div className="mt-6">
          <h3 className="text-lg font-semibold mb-2">Th√™m nh·∫≠n x√©t c·ªßa b·∫°n</h3>
          <textarea
            placeholder="Vi·∫øt nh·∫≠n x√©t..."
            className="w-full p-3 rounded-lg bg-gray-700 text-white resize-none focus:outline-none focus:ring-2 focus:ring-red-500"
            rows={4}
            value={userComment}
            onChange={(e) => setUserComment(e.target.value)}
          />
          <button
            onClick={handlePostComment}
            className="mt-3 px-5 py-2 bg-[#E63946] rounded-lg text-white font-semibold hover:bg-red-700"
          >
            G·ª≠i nh·∫≠n x√©t
          </button>
        </div>
      </div>
    </div>
  );
};

export default MovieDetail;
